#!/bin/bash

set -ueo pipefail

# Either output directly, or pipe to rack.
output_archive () {
  if ${STDOUT}; then
    cat /dev/stdin
  else
    echo "Uploading archive to Cloud Files..."
    cat /dev/stdin | rack files large-object upload --size-pieces 64 --container ${CONTAINER} --stdin content --name ${object_name}
  fi

  return 0
}

# Removes non-alphanumeric characters and downcases a string
slugify () {
  string=${1:-}
  echo $string | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z

  return 0
}

usage () {
  echo "Usage: backup [options]"
  echo ""
  echo "Backup an directory as a tarball to stdout or Cloud Files"
  echo ""
  echo "  Options:"
  echo "  -c, --container <name>    Name of a Cloud Files container"
  echo "  -h, --help                Show help information"
  echo "  -s, --source <path>       Path to source directory"
  echo "  --stdout                  Use stdout instead of Cloud Files"
  echo "  -z, --zip                 Use pigz to output gzip compressed archive"
  echo "  "
}

# Set default values for each of the options
CONTAINER=""
ZIP=false
HELP=false
SOURCE=""
STDOUT=false

# Get options
args=$(getopt -o "c:h::s:z::" --long "container:,help::,source:,stdout::,zip::" -n $(basename "${0}") -- "$@")
if [ $? != 0 ] ; then echo "Unable to parse options." >&2 ; exit 1 ; fi
eval set -- "$args"

# Assign options to variables, override defaults
while true; do
  param=${1:-}
  value=${2:-}

  case "$param" in
    -c | --container ) CONTAINER="$value"; shift; shift ;;
    -h | --help ) HELP=true; shift; shift ;;
    -s | --source ) SOURCE="$value"; shift; shift ;;
    --stdout ) STDOUT=true; shift; shift ;;
    -z | --zip ) ZIP=true; shift; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# Exit early and show usage if requested
if ${HELP}; then
  usage
  exit 0
fi

# After assigning variables, make sure we're in a good state to proceed.
if [[ -z ${SOURCE} ]]; then
  >&2 echo "Error: No backup source specified."
  exit 1
fi

if [[ -z ${CONTAINER} ]] && ! ${STDOUT}; then
  >&2 echo "Error: No Cloud Files container specified. Did you mean to use -o?"
  exit 1
fi

# (silently) Ensure the Cloud Files container exists
if [[ -n ${CONTAINER} ]]; then
  rack files container create --name ${CONTAINER} > /dev/null
fi

# Assign year/month/day/time to variables
date_year=$(date +%Y)
date_month=$(date +%m)
date_day=$(date +%d)
date_time=$(date +%H-%M)

# Remove all the non-alphanumeric characters from the source directory and use
# the result as the archive's file name
file_slug=$(slugify ${date_time}-${SOURCE})
file_name=${file_slug}.tar

# If compressing the archive, add the customary `.gz` file extension.
if ${ZIP}; then
  file_name=${file_name}.gz
fi

# Format the Cloud Files object name.
object_name=${date_year}/${date_month}/${date_day}/${file_name}

# Run the appropriate invocation of `tar`
if ! ${STDOUT}; then
  echo "Bundling archive..."
fi

if ${ZIP}; then
  tar -cf - -C ${SOURCE} . | pigz -c | output_archive
else
  tar -cf - -C ${SOURCE} . | output_archive
fi

if ! ${STDOUT}; then
  echo "Done."
fi

exit 0
